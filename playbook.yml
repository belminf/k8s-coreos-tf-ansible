---
- hosts: all
  gather_facts: False
  roles:
    - vmware.coreos-bootstrap

- name: install k8s
  hosts: all
  become: yes
  tasks:

    - name: generate hosts file
      lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].ansible_hostname  }}"
      when: hostvars[item]['ansible_default_ipv4'] is defined
      loop: "{{ query('inventory_hostnames', 'all') }}"

    - name: enable docker service
      systemd: name=docker state=started enabled=yes

    - name: create dir for CNI plugins
      file: path=/opt/cni/bin state=directory recurse=yes

    - name: install CNI plugins
      unarchive:
        src: https://github.com/containernetworking/plugins/releases/download/{{ cni_release }}/cni-plugins-amd64-{{ cni_release }}.tgz
        dest: /opt/cni/bin
        creates: /opt/cni/bin/loopback
        remote_src: yes

    - name: create dir for k8s binaries
      file: path=/opt/bin state=directory recurse=yes

    - name: install k8s binaries
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ k8s_release }}/bin/linux/amd64/{{ item }}
        dest: /opt/bin
        mode: 0555
      loop:
        - kubeadm
        - kubelet
        - kubectl

    - name: create kubelet config
      get_url:
        url: https://raw.githubusercontent.com/kubernetes/kubernetes/{{ k8s_release }}/build/debs/kubelet.service
        dest: /etc/systemd/system/kubelet.service
      notify: change kubelet config path

    - name: create dir for kubeadm conf
      file: path=/etc/systemd/system/kubelet.service.d state=directory recurse=yes

    - name: create kubeadm config
      get_url:
        url: https://raw.githubusercontent.com/kubernetes/kubernetes/{{ k8s_release }}/build/debs/10-kubeadm.conf
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      notify:
        - change kubeadm config path
        - remove default net args from kubeadm conf

    - name: commit changes to configs
      meta: flush_handlers

    - name: enable kubelet service
      systemd: name=kubelet daemon_reload=yes state=started enabled=yes

  handlers: 

    - name: change kubelet config path
      replace:
        path: /etc/systemd/system/kubelet.service
        regexp: /usr/bin
        replace: /opt/bin

    - name: change kubeadm config path
      replace:
        path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        regexp: /usr/bin
        replace: /opt/bin

    - name: remove default net args from kubeadm conf
      lineinfile:
        path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        regexp: '^Environment="KUBELET_NETWORK_ARGS=.+"$'
        line: 'Environment="KUBELET_NETWORK_ARGS="'
        state: absent


- name: configure master
  hosts: master
  tasks:

    - name: init cluster
      shell: /opt/bin/kubeadm init --pod-network-cidr={{ pod_cidr }}
      args:
        creates: /etc/kubernetes/admin.conf
      become: yes

    - name: create .kube dir
      file: path=~/.kube state=directory

    - name: copy admin.conf for user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: ~{{ ansible_ssh_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_ssh_user }}"
      become: yes

    - name: install Pod network
      shell: "/opt/bin/kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/{{ flannel_release }}/Documentation/kube-flannel.yml && date >> .pod_network_done"
      args:
        chdir: ~{{ ansible_ssh_user }}
        creates: .pod_network_done

    - name: untaint for single node cluster
      shell: "/opt/bin/kubectl taint nodes --all node-role.kubernetes.io/master-"
      args:
        chdir: ~{{ ansible_ssh_user }}
        creates: .single_node_taint
      when: single_node is defined and single_node

    - name: get join command
      shell: "/opt/bin/kubeadm token create --print-join-command"
      register: join_command_raw
      become: yes

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"


- name: configure knodes
  hosts: knodes
  tasks:

    - name: join cluster
      shell: "{{ hostvars['master'].join_command }} >> .joined_cluster"
      args:
        chdir: $HOME
        creates: .joined_cluster
